#version 330 core

layout(location = 0) out vec4 FragColor;
//in
in vec3 v_Position;
in vec2 v_TexCoord;
in vec3 v_Normal;
in vec4 FragPosLightSpace;//片段变换到光空间


//材质
struct Material {
    //贴图
    sampler2D texture1;
    sampler2D texture2;
    //specular贴图
    sampler2D specular_Texture;
    sampler2D shadowMap;
    //光泽度
    float shininess;
}; 
//平行光
struct DirLight {
    vec3 direction;//位置

	//平行光对3中效果的强度影响
    vec3 ambient;//环境光反射
    vec3 diffuse;//漫反射
    vec3 specular;//镜面反射
};
//点光
struct PointLight {
    vec3 position;
    vec3 color;
	
    //点光对3中效果的强度影响
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
//聚光
struct SpotLight {
    //聚光范围
    float cutOff;
    float outerCutOff;

    //聚光对3中效果的强度影响
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;       
};
struct ConstVal{
    //camera
    vec3 camera_Position;
    vec3 camera_Direction;
    //边缘软化Attenuation
    float constant;
    float linear;
    float quadratic;
    bool blinn;//Blinn-Phong
    bool gamma;
    //
    vec3 lightPos;
};
//
uniform Material material;
uniform DirLight dirLight;
uniform PointLight pointLights[10];
uniform SpotLight spotLight;
uniform ConstVal constVal;

// function prototypes声明在此处，main可以用
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

//Shadow
float ShadowCalculation(vec4 fragPosLightSpace, float bias)
{

    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)采样
    float closestDepth = texture(material.shadowMap, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // check whether current frag pos is in shadow

    // PCF
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(material.shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(material.shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;

    if(projCoords.z > 1.0)
        shadow = 0.0;
    return shadow;
}


////2Linear
float near = 0.1; 
float far  = 1000.0; 

float LinearizeDepth(float depth) 
{
    float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));    
}


//
void main()
{

    vec3 viewPos = normalize(constVal.camera_Position - v_Position);//视线
    vec3 norm = normalize(v_Normal);//片段modle后的法线

    vec3 result1 = CalcDirLight(dirLight, norm, viewPos);

    vec3 result2;
    for(int i = 0; i < 10; i++){
        result2 += CalcPointLight(pointLights[i], norm, v_Position, viewPos);
    }
    vec3 result3 = CalcSpotLight(spotLight, norm, v_Position, viewPos);  

    //Shadow
    vec3 lightDir = normalize(constVal.lightPos - v_Position);
    float bias = max(0.02 * (1.0 - dot(norm, lightDir)), 0.005);

    //float bias = 0.005;
    float shadow = ShadowCalculation(FragPosLightSpace, bias);  
    vec3 result = (result1 + (1.0 - shadow) * (result2 + result3));
    
    

    //vec3 result = result1 + result2 + result3;
    FragColor = vec4(result, 1.0) * vec4(0.8,0.9,1.0,1.0);//最终片段颜色

    //Linear Depth
    //float depth = (LinearizeDepth(gl_FragCoord.z)-near)/ (far-near);
    //FragColor = vec4(vec3(depth), 1.0);

}

//
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{


    vec3 lightDir = normalize(-light.direction);//平行光向量   
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);//漫反射
    // specular shading
    float spec = 0.0;
    if(constVal.blinn)
    {
        vec3 halfwayDir = normalize(lightDir + viewDir);  
        spec = pow(max(dot(normal, halfwayDir), 0.0), 16.0);
    }
    else
    {
        vec3 reflectDir = reflect(-lightDir, normal);
        spec = pow(max(dot(viewDir, reflectDir), 0.0), 8.0);
    }

    //计算影响
    vec3 ambient = light.ambient * texture(material.texture1, v_TexCoord).rgb;
    vec3 diffuse = light.diffuse * diff * texture(material.texture1, v_TexCoord).rgb;
    vec3 specular = light.specular * spec * vec3(texture(material.specular_Texture, v_TexCoord));

    return (ambient + diffuse + specular);
    }
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);//当前点光向量 
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    float spec = 0.0;
    if(constVal.blinn)
    {
        vec3 halfwayDir = normalize(lightDir + viewDir);  
        spec = pow(max(dot(normal, halfwayDir), 0.0), 16.0);
    }
    else
    {
        vec3 reflectDir = reflect(-lightDir, normal);
        spec = pow(max(dot(viewDir, reflectDir), 0.0), 8.0);
    }

    // attenuation衰减
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (constVal.constant + constVal.linear * distance + constVal.quadratic * (distance * distance));   
    //float attenuation = 1.0 / (constVal.gamma ? distance * distance : distance);
    //计算影响
    vec3 ambient = light.ambient * texture(material.texture1, v_TexCoord).rgb;
    vec3 diffuse = light.color * light.diffuse * diff * texture(material.texture1, v_TexCoord).rgb;
    vec3 specular = light.color * light.specular * spec * vec3(texture(material.specular_Texture, v_TexCoord));
    ambient *= attenuation;
    diffuse *= attenuation ;
    specular *= attenuation ;
    return (ambient + diffuse + specular);
}
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(constVal.camera_Position - fragPos);//摄像机向量
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    float spec = 0.0;
    if(constVal.blinn)
    {
        vec3 halfwayDir = normalize(lightDir + viewDir);  
        spec = pow(max(dot(normal, halfwayDir), 0.0), 16.0);
    }
    else
    {
        vec3 reflectDir = reflect(-lightDir, normal);
        spec = pow(max(dot(viewDir, reflectDir), 0.0), 8.0);
    }

    // attenuation
    float distance = length(constVal.camera_Position - fragPos);
    float attenuation = 1.0 / (constVal.constant + constVal.linear * distance + constVal.quadratic * (distance * distance));    
    //float attenuation = 1.0 / (constVal.gamma ? distance * distance : distance);
    // spotlight intensity
    float theta = dot(lightDir, normalize(-constVal.camera_Direction)); 
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    //计算影响
    vec3 ambient = light.ambient * texture(material.texture1, v_TexCoord).rgb;
    vec3 diffuse = light.diffuse * diff * texture(material.texture1, v_TexCoord).rgb;
    vec3 specular = light.specular * spec * vec3(texture(material.specular_Texture, v_TexCoord));
    ambient *= attenuation * intensity;
    diffuse *= attenuation * intensity;
    specular *= attenuation * intensity;
    return (ambient + diffuse + specular);
}
